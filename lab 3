import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;

public class ProducerConsumer {
    static final int CAPACITY = 10; 
    static Queue<Integer> buffer = new LinkedList<>(); 
    static Random random = new Random();

    
    static class Producer extends Thread {
        @Override
        public void run() {
            while (true) {
                try {
                    produce();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }

        private void produce() throws InterruptedException {
            synchronized (buffer) {
                while (buffer.size() == CAPACITY) {
                    System.out.println("The stock is full, we are waiting for it to be consumed...");
                    buffer.wait();
                }

                int item = random.nextInt(100); 
                buffer.offer(item);
                System.out.println("The manufacturer produced: " + item);
                buffer.notifyAll();
                Thread.sleep(random.nextInt(1000));
            }
        }
    }

    
    static class Consumer extends Thread {
        @Override
        public void run() {
            while (true) {
                try {
                    consume();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }

        private void consume() throws InterruptedException {
            synchronized (buffer) {
                while (buffer.isEmpty()) {
                    System.out.println("The stock is empty, we are waiting for it to be produced...");
                    buffer.wait();
                }

                int consumed = buffer.poll();
                System.out.println("The consumer consumed: " + consumed);
                buffer.notifyAll();
                Thread.sleep(random.nextInt(1000)); 
            }
        }
    }

    public static void main(String[] args) {
        
        for (int i = 0; i < 2; i++) {
            new Producer().start();
        }

        
        for (int i = 0; i < 3; i++) {
            new Consumer().start();
        }
    }
}
